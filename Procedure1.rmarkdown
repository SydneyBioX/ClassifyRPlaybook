# Procedure 1

## Intro

text

## Set up the environment and data objects

Timing \~ 0.95s

1.  Load the R packages into the R environment:


```{r message = FALSE}
start_time <- Sys.time()

library(ClassifyR)
library(openxlsx)
```


2.  Import datasets


```{r}
clinical = read.xlsx("data/procedure1/clinical.xlsx")
clusters <- readRDS("data/procedure1/cluster_result_ER_and_PR_onlyER+PR+.rds")
p <- readRDS("data/procedure1/pseudobulk_overall_sum.rds")
p <- p[rownames(p) %in% clusters$sample_id, ]
p_cell <- readRDS("data/procedure1/pseudobulk_celltype_sum.rds")
p_cell <- p_cell[rownames(p_cell) %in% clusters$sample_id, ]
data = list("pseudo_bulk_overall" = p, "pseudo_bulk_cell" = p_cell)

end_time <- Sys.time()
execution_time <- end_time - start_time
print(execution_time)
```


The first command reads in clinical data for 92 patients with breast cancer, and shows 44 features including patient id.

## Final Procedure using SCM Classifier with 5% of features selected from t-test


```{r warning = FALSE, message = FALSE}
set.seed(1)
nFeatures = list(pseudo_bulk_overall = 0.05*ncol(p), pseudo_bulk_cell = 0.05*ncol(p_cell))
outcome = as.factor(clusters$cluster)

classifyr_result3 <- crossValidate(data, outcome = outcome, classifier = "SVM", nFeatures = nFeatures, nFolds = 5, nRepeats = 100, nCores = 5)
performancePlot(classifyr_result3)
samplesMetricMap(classifyr_result3)

classifyr_result3 <- sapply(classifyr_result3, function(results) {
  calcCVperformance(results, performanceType = "Sample Accuracy")
}) # loop to calculate sample accuracy
accuracyMatrix <- sapply(classifyr_result3, function(result) performance(result)[["Sample Accuracy"]])
plot(accuracyMatrix) #scatterplot of sample accuracies for both datasets
```


The 'set.seed(1)' function ensures that any subsequent operations involving randomness yield consistent results across runs.

